package Placement;

/**
 * Date 09/22/2014
 * @author tusroy
 *
 * Do pattern matching using KMPClass algorithm
 *
 * Runtime complexity - O(m + n) where m is length of text and n is length of pattern
 * Space complexity - O(n)
 */
public class KMPClass
{

    /**
     * Slow method of pattern matching
     */
    public boolean hasSubstring(char[] text, char[] pattern){
        int i=0;
        int j=0;
        int k = 0;
        while(i < text.length && j < pattern.length){
            if(text[i] == pattern[j]){
                i++;
                j++;
            }else{
                j=0;
                k++;
                i = k;
            }
        }
        if(j == pattern.length){
            return true;
        }
        return false;
    }

    private static int[] computePrefixFunction(char[] pattern)
    {
        int[] prefix = new int[pattern.length];
        prefix[0] = 0;
        int k = 0;
        for(int q = 1; q < pattern.length; q++)
        {
            while((k>0)&&(pattern[k]!=pattern[q]))
            {
                k=prefix[k-1];
            }
            if(pattern[k]==pattern[q])
            {
                k++;
            }
            prefix[q]=k;
        }
        return prefix;

    }

    private void KMPMatcher(char[] text,char[] pattern)
    {
        int[] prefix=computePrefixFunction(pattern);
        int q=0;
        for(int i=0;i<text.length;i++)
        {
            while((q>0)&&(pattern[q]!=text[i]))
            {
                q=prefix[q-1];
            }
            if(pattern[q]==text[i])
            {
                q++;
            }
            if(q==pattern.length)
            {
                System.out.println("Pattern occurs with shift : "+(i-pattern.length+1));
                q=prefix[q-1];
            }
        }
    }

    public static void main(String args[]){

        String str = "Hello this is balraj and you are";
        String subString = "a";
        KMPClass ss = new KMPClass();
        ss.KMPMatcher(str.toCharArray(), subString.toCharArray());
       // int[] arr=computePrefixFunction(subString.toCharArray());
       // for(int i:arr)
      //  {
       //     System.out.print(i+" ");
      //  }


    }
}